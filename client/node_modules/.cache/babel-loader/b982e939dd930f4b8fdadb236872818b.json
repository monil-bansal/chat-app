{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\upload\\\\upload1\\\\tech\\\\dev\\\\chat-app\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport io from 'socket.io-client';\nlet socket;\n\nconst Chat = ({\n  location\n}) => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const ENDPOINT = 'localhost:5000';\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      alert(error);\n    }); // return statements are used for unmounting\n\n    return () => {\n      socket.emit('disconnect');\n      socket.off();\n    };\n  }, [ENDPOINT, localStorage.search]);\n  useEffect(() => {\n    socket.on('message', messgae => {\n      setMessages([...messages, messgae]);\n    });\n  }, [messages]);\n\n  const sendMessage = event => {\n    if (message) {\n      socket.emit('sendMessage', message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outterContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: message,\n        onChange: event => setMessage(event.target.value),\n        onkeypress: event => event.key === 'Enter' ? sendMessage(event) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Chat, \"M7DGl/NqV6luCY8IpJPKHYFo+ZU=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["D:/upload/upload1/tech/dev/chat-app/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","socket","Chat","location","name","setName","room","setRoom","message","setMessage","messages","setMessages","ENDPOINT","parse","search","emit","error","alert","off","localStorage","on","messgae","sendMessage","event","target","value","key"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,IAAIC,MAAJ;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AACzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAMe,QAAQ,GAAG,gBAAjB;AAGAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAACM,MAAAA,IAAD;AAAOE,MAAAA;AAAP,QAAeP,WAAW,CAACc,KAAZ,CAAkBV,QAAQ,CAACW,MAA3B,CAArB;AAEAb,IAAAA,MAAM,GAAGD,EAAE,CAACY,QAAD,CAAX;AACAP,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAL,IAAAA,MAAM,CAACc,IAAP,CAAY,MAAZ,EAAoB;AAACX,MAAAA,IAAD;AAAOE,MAAAA;AAAP,KAApB,EAAkCU,KAAD,IAAS;AACtCC,MAAAA,KAAK,CAACD,KAAD,CAAL;AACH,KAFD,EAPY,CAaZ;;AACA,WAAO,MAAM;AACTf,MAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ;AACAd,MAAAA,MAAM,CAACiB,GAAP;AACH,KAHD;AAIH,GAlBQ,EAkBP,CAACN,QAAD,EAAUO,YAAY,CAACL,MAAvB,CAlBO,CAAT;AAoBAhB,EAAAA,SAAS,CAAC,MAAI;AACVG,IAAAA,MAAM,CAACmB,EAAP,CAAU,SAAV,EAAsBC,OAAD,IAAW;AAC5BV,MAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAaW,OAAb,CAAD,CAAX;AACH,KAFD;AAGH,GAJQ,EAIP,CAACX,QAAD,CAJO,CAAT;;AAMA,QAAMY,WAAW,GAAIC,KAAD,IAAU;AAC1B,QAAGf,OAAH,EAAW;AACPP,MAAAA,MAAM,CAACc,IAAP,CAAY,aAAZ,EAA2BP,OAA3B;AACH;AACJ,GAJD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAG,iBAAjB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAG,WAAjB;AAAA,6BACI;AAAO,QAAA,KAAK,EAAEA,OAAd;AAAuB,QAAA,QAAQ,EAAIe,KAAD,IAAWd,UAAU,CAACc,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAvD;AAA6E,QAAA,UAAU,EAAGF,KAAD,IAASA,KAAK,CAACG,GAAN,KAAY,OAAZ,GAAqBJ,WAAW,CAACC,KAAD,CAAhC,GAAyC;AAA3I;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAhDD;;GAAMrB,I;;KAAAA,I;AAmDN,eAAeA,IAAf","sourcesContent":["import React, {useState, useEffect} from 'react' ;\r\nimport queryString from 'query-string';\r\nimport io from 'socket.io-client';\r\n\r\nlet socket;\r\n\r\nconst Chat = ({location}) => {\r\n    const [name, setName] = useState('');\r\n    const [room, setRoom] = useState('');\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n    const ENDPOINT = 'localhost:5000';\r\n\r\n\r\n    useEffect(() => {\r\n        const {name, room} = queryString.parse(location.search);\r\n        \r\n        socket = io(ENDPOINT);\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        socket.emit('join', {name, room},(error)=>{\r\n            alert(error);\r\n        });\r\n\r\n\r\n\r\n        // return statements are used for unmounting\r\n        return () => {\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n        }\r\n    },[ENDPOINT,localStorage.search])\r\n\r\n    useEffect(()=>{\r\n        socket.on('message', (messgae)=>{\r\n            setMessages([...messages,messgae]);\r\n        })\r\n    },[messages])\r\n\r\n    const sendMessage = (event) =>{\r\n        if(message){\r\n            socket.emit('sendMessage', message);\r\n        }\r\n    }\r\n    return (\r\n        <div className = \"outterContainer\">   \r\n            <div className = \"container\">\r\n                <input value={message} onChange= {(event) => setMessage(event.target.value)} onkeypress={(event)=>event.key==='Enter'? sendMessage(event) :null} /> \r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    \r\n}\r\n\r\n\r\nexport default Chat; "]},"metadata":{},"sourceType":"module"}